plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdk 34

    namespace "media.uqab.quranapi"

    // -------------------------------------------------------------------------------------------- //
    // Automating Version Numbering
    // https://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
    // answer by: Ahmad Aghazadeh

    def _versionCode = 0
    def _major = 0
    def _minor = 0
    def _patch = 0

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        _patch = versionProps['PATCH'].toInteger() + 1
        _major = versionProps['MAJOR'].toInteger()
        _minor = versionProps['MINOR'].toInteger()
        _versionCode= versionProps['VERSION_CODE'].toInteger() + 1
        if(_patch == 100)
        {
            _patch = 0
            _minor =_minor + 1
        }
        if(_minor == 10){
            _minor = 0
            _major =_major + 1
        }

        versionProps['MAJOR'] =_major.toString()
        versionProps['MINOR'] =_minor.toString()
        versionProps['PATCH'] =_patch.toString()
        versionProps['VERSION_CODE']=_versionCode.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
    def _versionName = "${_major}.${_minor}.${_patch}"

    defaultConfig {
        minSdk 21
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlin {
        jvmToolchain(17)
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    implementation 'com.google.code.gson:gson:2.11.0'
    implementation "androidx.core:core-ktx:1.13.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.8.3"

    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
    api 'com.github.fcat97:tajweedApi:2.1.1'
    api 'com.github.fcat97:tajweedApi-android:2.1.1'
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication Called release
            release(MavenPublication) {
                /// Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'media.uqab.quranApi'
                artifactId = 'final'

                def versionPropsFile = file('version.properties')
                if (versionPropsFile.canRead()) {
                    Properties versionProps = new Properties()

                    versionProps.load(new FileInputStream(versionPropsFile))

                    def _patch = versionProps['PATCH'].toInteger()
                    def _major = versionProps['MAJOR'].toInteger()
                    def _minor = versionProps['MINOR'].toInteger()

                    version = "${_major}.${_minor}.${_patch}"
                }
            }
        }
    }
}
